{
  config,
  lib,
  pkgs,
  ...
}:
let
  # Import our custom lib functions
  moduleLib = import ../../../lib/module { inherit lib; };
  inherit (moduleLib) mkBoolOpt mkOpt enabled;

  # Helper for string options
  mkStrOpt = default: desc: mkOpt lib.types.str default desc;

  cfg = config.modules.home.programs.claude-code;

  # Claude Code settings.json configuration
  claudeSettingsConfig = pkgs.writeText "claude-settings.json" (builtins.toJSON {
    model = "sonnet";
    statusLine = lib.mkIf cfg.statusline.enable {
      type = "command";
      command = "bash $HOME/.claude/statusline-command.sh";
    };
  });

  # Advanced Claude Code statusline script
  claudeStatuslineScript = pkgs.writeShellScript "statusline-command.sh" ''
    #!/bin/bash
    # Generated by cc-statusline v1.3.2 (https://www.npmjs.com/package/@chongdashu/cc-statusline)
    # Custom Claude Code statusline - Created: 2025-08-29T00:32:22.807Z
    # Theme: detailed | Colors: true | Features: directory, git, model, context, usage, session, tokens, burnrate
    STATUSLINE_VERSION="1.3.2"

    input=$(cat)

    # Get the directory where this statusline script is located
    SCRIPT_DIR="$(cd "$(dirname "''${BASH_SOURCE[0]}")" && pwd)"
    LOG_FILE="''${SCRIPT_DIR}/statusline.log"
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

    # ---- check jq availability ----
    HAS_JQ=0
    if command -v jq >/dev/null 2>&1; then
      HAS_JQ=1
    fi

    # ---- logging ----
    {
      echo "[''$TIMESTAMP] Status line triggered (cc-statusline v''${STATUSLINE_VERSION})"
      echo "[''$TIMESTAMP] Input:"
      if [ "''$HAS_JQ" -eq 1 ]; then
        echo "''$input" | jq . 2>/dev/null || echo "''$input"
        echo "[''$TIMESTAMP] Using jq for JSON parsing"
      else
        echo "''$input"
        echo "[''$TIMESTAMP] WARNING: jq not found, using bash fallback for JSON parsing"
      fi
      echo "---"
    } >> "''$LOG_FILE" 2>/dev/null

    # ---- color helpers (force colors for Claude Code) ----
    use_color=1
    [ -n "''$NO_COLOR" ] && use_color=0

    C() { if [ "''$use_color" -eq 1 ]; then printf '\033[%sm' "''$1"; fi; }
    RST() { if [ "''$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

    # ---- modern sleek colors ----
    dir_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;117m'; fi; }    # sky blue
    model_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;147m'; fi; }  # light purple
    version_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;180m'; fi; } # soft yellow
    cc_version_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;249m'; fi; } # light gray
    style_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;245m'; fi; } # gray
    rst() { if [ "''$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

    # ---- time helpers ----
    to_epoch() {
      ts="''$1"
      if command -v gdate >/dev/null 2>&1; then gdate -d "''$ts" +%s 2>/dev/null && return; fi
      date -u -j -f "%Y-%m-%dT%H:%M:%S%z" "''${ts/Z/+0000}" +%s 2>/dev/null && return
      python3 - "''$ts" <<'PY' 2>/dev/null
    import sys, datetime
    s=sys.argv[1].replace('Z','+00:00')
    print(int(datetime.datetime.fromisoformat(s).timestamp()))
    PY
    }

    fmt_time_hm() {
      epoch="''$1"
      if date -r 0 +%s >/dev/null 2>&1; then date -r "''$epoch" +"%H:%M"; else date -d "@''$epoch" +"%H:%M"; fi
    }

    progress_bar() {
      pct="''${1:-0}"; width="''${2:-10}"
      [[ "''$pct" =~ ^[0-9]+$ ]] || pct=0; ((pct<0))&&pct=0; ((pct>100))&&pct=100
      filled=$(( pct * width / 100 )); empty=$(( width - filled ))
      printf '%*s' "''$filled" "" | tr " " "="
      printf '%*s' "''$empty" "" | tr " " "-"
    }

    # git utilities
    num_or_zero() { v="''$1"; [[ "''$v" =~ ^[0-9]+$ ]] && echo "''$v" || echo 0; }

    # ---- JSON extraction utilities ----
    # Pure bash JSON value extractor (fallback when jq not available)
    extract_json_string() {
      local json="''$1"
      local key="''$2"
      local default="''${3:-}"

      # For nested keys like workspace.current_dir, get the last part
      local field="''${key##*.}"
      field="''${field%% *}"  # Remove any jq operators

      # Try to extract string value (quoted)
      local value=$(echo "''$json" | grep -o "\"''${field}\"[[:space:]]*:[[:space:]]*\"[^\"]*\"" | head -1 | sed 's/.*:[[:space:]]*"\([^"]*\)".*/\1/')

      # Convert escaped backslashes to forward slashes for Windows paths
      if [ -n "''$value" ]; then
        value=$(echo "''$value" | sed 's/\\\\/\//g')
      fi

      # If no string value found, try to extract number value (unquoted)
      if [ -z "''$value" ] || [ "''$value" = "null" ]; then
        value=$(echo "''$json" | grep -o "\"''${field}\"[[:space:]]*:[[:space:]]*[0-9.]\+" | head -1 | sed 's/.*:[[:space:]]*\([0-9.]\+\).*/\1/')
      fi

      # Return value or default
      if [ -n "''$value" ] && [ "''$value" != "null" ]; then
        echo "''$value"
      else
        echo "''$default"
      fi
    }

    # ---- basics ----
    if [ "''$HAS_JQ" -eq 1 ]; then
      current_dir=$(echo "''$input" | jq -r '.workspace.current_dir // .cwd // "unknown"' 2>/dev/null | sed "s|^''$HOME|~|g")
      model_name=$(echo "''$input" | jq -r '.model.display_name // "Claude"' 2>/dev/null)
      model_version=$(echo "''$input" | jq -r '.model.version // ""' 2>/dev/null)
      session_id=$(echo "''$input" | jq -r '.session_id // ""' 2>/dev/null)
      cc_version=$(echo "''$input" | jq -r '.version // ""' 2>/dev/null)
      output_style=$(echo "''$input" | jq -r '.output_style.name // ""' 2>/dev/null)
    else
      # Bash fallback for JSON extraction
      # Extract current_dir from workspace object - look for the pattern workspace":{"current_dir":"..."}
      current_dir=$(echo "''$input" | grep -o '"workspace"[[:space:]]*:[[:space:]]*{[^}]*"current_dir"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"current_dir"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/' | sed 's/\\\\/\//g')

      # Fall back to cwd if workspace extraction failed
      if [ -z "''$current_dir" ] || [ "''$current_dir" = "null" ]; then
        current_dir=$(echo "''$input" | grep -o '"cwd"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"cwd"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/' | sed 's/\\\\/\//g')
      fi

      # Fallback to unknown if all extraction failed
      [ -z "''$current_dir" ] && current_dir="unknown"
      current_dir=$(echo "''$current_dir" | sed "s|^''$HOME|~|g")

      # Extract model name from nested model object
      model_name=$(echo "''$input" | grep -o '"model"[[:space:]]*:[[:space:]]*{[^}]*"display_name"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"display_name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
      [ -z "''$model_name" ] && model_name="Claude"
      # Model version is in the model ID, not a separate field
      model_version=""  # Not available in Claude Code JSON
      session_id=$(extract_json_string "''$input" "session_id" "")
      # CC version is at the root level
      cc_version=$(echo "''$input" | grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | sed 's/.*"version"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
      # Output style is nested
      output_style=$(echo "''$input" | grep -o '"output_style"[[:space:]]*:[[:space:]]*{[^}]*"name"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
    fi

    # ---- git colors ----
    git_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;150m'; fi; }  # soft green
    rst() { if [ "''$use_color" -eq 1 ]; then printf '\033[0m'; fi; }

    # ---- git ----
    git_branch=""
    if git rev-parse --git-dir >/dev/null 2>&1; then
      git_branch=$(git branch --show-current 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
    fi

    # ---- context window calculation ----
    context_pct=""
    context_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[1;37m'; fi; }  # default white

    # Determine max context based on model
    get_max_context() {
      local model_name="''$1"
      case "''$model_name" in
        *"Opus 4"*|*"opus 4"*|*"Opus"*|*"opus"*)
          echo "200000"  # 200K for all Opus versions
          ;;
        *"Sonnet 4"*|*"sonnet 4"*|*"Sonnet 3.5"*|*"sonnet 3.5"*|*"Sonnet"*|*"sonnet"*)
          echo "200000"  # 200K for Sonnet 3.5+ and 4.x
          ;;
        *"Haiku 3.5"*|*"haiku 3.5"*|*"Haiku 4"*|*"haiku 4"*|*"Haiku"*|*"haiku"*)
          echo "200000"  # 200K for modern Haiku
          ;;
        *"Claude 3 Haiku"*|*"claude 3 haiku"*)
          echo "100000"  # 100K for original Claude 3 Haiku
          ;;
        *)
          echo "200000"  # Default to 200K
          ;;
      esac
    }

    if [ -n "''$session_id" ] && [ "''$HAS_JQ" -eq 1 ]; then
      MAX_CONTEXT=$(get_max_context "''$model_name")

      # Convert current dir to session file path
      project_dir=$(echo "''$current_dir" | sed "s|~|''$HOME|g" | sed 's|/|-|g' | sed 's|^-||')
      session_file="''$HOME/.claude/projects/-''${project_dir}/''${session_id}.jsonl"

      if [ -f "''$session_file" ]; then
        # Get the latest input token count from the session file
        latest_tokens=$(tail -20 "''$session_file" | jq -r 'select(.message.usage) | .message.usage | ((.input_tokens // 0) + (.cache_read_input_tokens // 0))' 2>/dev/null | tail -1)

        if [ -n "''$latest_tokens" ] && [ "''$latest_tokens" -gt 0 ]; then
          context_used_pct=$(( latest_tokens * 100 / MAX_CONTEXT ))
          context_remaining_pct=$(( 100 - context_used_pct ))

          # Set color based on remaining percentage
          if [ "''$context_remaining_pct" -le 20 ]; then
            context_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;203m'; fi; }  # coral red
          elif [ "''$context_remaining_pct" -le 40 ]; then
            context_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;215m'; fi; }  # peach
          else
            context_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;158m'; fi; }  # mint green
          fi

          context_pct="''${context_remaining_pct}%"
        fi
      fi
    fi

    # ---- usage colors ----
    usage_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;189m'; fi; }  # lavender
    cost_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;222m'; fi; }   # light gold
    burn_color() { if [ "''$use_color" -eq 1 ]; then printf '\033[38;5;220m'; fi; }   # bright gold
    session_color() {
      rem_pct=$(( 100 - session_pct ))
      if   (( rem_pct <= 10 )); then SCLR='38;5;210'  # light pink
      elif (( rem_pct <= 25 )); then SCLR='38;5;228'  # light yellow
      else                          SCLR='38;5;194'; fi  # light green
      if [ "''$use_color" -eq 1 ]; then printf '\033[%sm' "''$SCLR"; fi
    }

    # ---- cost and usage extraction ----
    session_txt=""; session_pct=0; session_bar=""
    cost_usd=""; cost_per_hour=""; tpm=""; tot_tokens=""

    # Extract cost data from Claude Code input
    if [ "''$HAS_JQ" -eq 1 ]; then
      # Get cost data from Claude Code's input
      cost_usd=$(echo "''$input" | jq -r '.cost.total_cost_usd // empty' 2>/dev/null)
      total_duration_ms=$(echo "''$input" | jq -r '.cost.total_duration_ms // empty' 2>/dev/null)

      # Calculate burn rate ($/hour) from cost and duration
      if [ -n "''$cost_usd" ] && [ -n "''$total_duration_ms" ] && [ "''$total_duration_ms" -gt 0 ]; then
        # Convert ms to hours and calculate rate
        cost_per_hour=$(echo "''$cost_usd ''$total_duration_ms" | awk '{printf "%.2f", $1 * 3600000 / $2}')
      fi
    else
      # Bash fallback for cost extraction
      cost_usd=$(echo "''$input" | grep -o '"total_cost_usd"[[:space:]]*:[[:space:]]*[0-9.]*' | sed 's/.*:[[:space:]]*\([0-9.]*\).*/\1/')
      total_duration_ms=$(echo "''$input" | grep -o '"total_duration_ms"[[:space:]]*:[[:space:]]*[0-9]*' | sed 's/.*:[[:space:]]*\([0-9]*\).*/\1/')

      # Calculate burn rate ($/hour) from cost and duration
      if [ -n "''$cost_usd" ] && [ -n "''$total_duration_ms" ] && [ "''$total_duration_ms" -gt 0 ]; then
        # Convert ms to hours and calculate rate
        cost_per_hour=$(echo "''$cost_usd ''$total_duration_ms" | awk '{printf "%.2f", $1 * 3600000 / $2}')
      fi
    fi

    # Get token data and session info from ccusage if available
    if command -v ccusage >/dev/null 2>&1 && [ "''$HAS_JQ" -eq 1 ]; then
      blocks_output=""

      # Try ccusage with timeout for token data and session info
      if command -v timeout >/dev/null 2>&1; then
        blocks_output=$(timeout 5s ccusage blocks --json 2>/dev/null)
      elif command -v gtimeout >/dev/null 2>&1; then
        # macOS with coreutils installed
        blocks_output=$(gtimeout 5s ccusage blocks --json 2>/dev/null)
      else
        # No timeout available, run directly (ccusage should be fast)
        blocks_output=$(ccusage blocks --json 2>/dev/null)
      fi
      if [ -n "''$blocks_output" ]; then
        active_block=$(echo "''$blocks_output" | jq -c '.blocks[] | select(.isActive == true)' 2>/dev/null | head -n1)
        if [ -n "''$active_block" ]; then
          # Get token count from ccusage
          tot_tokens=$(echo "''$active_block" | jq -r '.totalTokens // empty')
          # Get tokens per minute from ccusage
          tpm=$(echo "''$active_block" | jq -r '.burnRate.tokensPerMinute // empty')

          # Session time calculation from ccusage
          reset_time_str=$(echo "''$active_block" | jq -r '.usageLimitResetTime // .endTime // empty')
          start_time_str=$(echo "''$active_block" | jq -r '.startTime // empty')

          if [ -n "''$reset_time_str" ] && [ -n "''$start_time_str" ]; then
            start_sec=$(to_epoch "''$start_time_str"); end_sec=$(to_epoch "''$reset_time_str"); now_sec=$(date +%s)
            total=$(( end_sec - start_sec )); (( total<1 )) && total=1
            elapsed=$(( now_sec - start_sec )); (( elapsed<0 ))&&elapsed=0; (( elapsed>total ))&&elapsed=$total
            session_pct=$(( elapsed * 100 / total ))
            remaining=$(( end_sec - now_sec )); (( remaining<0 )) && remaining=0
            rh=$(( remaining / 3600 )); rm=$(( (remaining % 3600) / 60 ))
            end_hm=$(fmt_time_hm "''$end_sec")
            session_txt="$(printf '%dh %dm until reset at %s (%d%%)' "''$rh" "''$rm" "''$end_hm" "''$session_pct")"
            session_bar=$(progress_bar "''$session_pct" 10)
          fi
        fi
      fi
    fi

    # ---- log extracted data ----
    {
      echo "[''$TIMESTAMP] Extracted: dir=''${current_dir:-}, model=''${model_name:-}, version=''${model_version:-}, git=''${git_branch:-}, context=''${context_pct:-}, cost=''${cost_usd:-}, cost_ph=''${cost_per_hour:-}, tokens=''${tot_tokens:-}, tpm=''${tpm:-}, session_pct=''${session_pct:-}"
      if [ "''$HAS_JQ" -eq 0 ]; then
        echo "[''$TIMESTAMP] Note: Context, tokens, and session info require jq for full functionality"
      fi
    } >> "''$LOG_FILE" 2>/dev/null

    # ---- render statusline ----
    # Line 1: Core info (directory, git, model, claude code version, output style)
    printf '📁 %s%s%s' "$(dir_color)" "''$current_dir" "$(rst)"
    if [ -n "''$git_branch" ]; then
      printf '  🌿 %s%s%s' "$(git_color)" "''$git_branch" "$(rst)"
    fi
    printf '  🤖 %s%s%s' "$(model_color)" "''$model_name" "$(rst)"
    if [ -n "''$model_version" ] && [ "''$model_version" != "null" ]; then
      printf '  🏷️ %s%s%s' "$(version_color)" "''$model_version" "$(rst)"
    fi
    if [ -n "''$cc_version" ] && [ "''$cc_version" != "null" ]; then
      printf '  📟 %sv%s%s' "$(cc_version_color)" "''$cc_version" "$(rst)"
    fi
    if [ -n "''$output_style" ] && [ "''$output_style" != "null" ]; then
      printf '  🎨 %s%s%s' "$(style_color)" "''$output_style" "$(rst)"
    fi

    # Line 2: Context and session time
    line2=""
    if [ -n "''$context_pct" ]; then
      context_bar=$(progress_bar "''$context_remaining_pct" 10)
      line2="🧠 $(context_color)Context Remaining: ''${context_pct} [''${context_bar}]$(rst)"
    fi
    if [ -n "''$session_txt" ]; then
      if [ -n "''$line2" ]; then
        line2="''$line2  ⌛ $(session_color)''${session_txt}$(rst) $(session_color)[''${session_bar}]$(rst)"
      else
        line2="⌛ $(session_color)''${session_txt}$(rst) $(session_color)[''${session_bar}]$(rst)"
      fi
    fi
    if [ -z "''$line2" ] && [ -z "''$context_pct" ]; then
      line2="🧠 $(context_color)Context Remaining: TBD$(rst)"
    fi

    # Line 3: Cost and usage analytics
    line3=""
    if [ -n "''$cost_usd" ] && [[ "''$cost_usd" =~ ^[0-9.]+$ ]]; then
      if [ -n "''$cost_per_hour" ] && [[ "''$cost_per_hour" =~ ^[0-9.]+$ ]]; then
        cost_per_hour_formatted=$(printf '%.2f' "''$cost_per_hour")
        line3="💰 $(cost_color)\$(printf '%.2f' "''$cost_usd")$(rst) ($(burn_color)\''${cost_per_hour_formatted}/h$(rst))"
      else
        line3="💰 $(cost_color)\$(printf '%.2f' "''$cost_usd")$(rst)"
      fi
    fi
    if [ -n "''$tot_tokens" ] && [[ "''$tot_tokens" =~ ^[0-9]+$ ]]; then
      if [ -n "''$tpm" ] && [[ "''$tpm" =~ ^[0-9.]+$ ]]; then
        tpm_formatted=$(printf '%.0f' "''$tpm")
        if [ -n "''$line3" ]; then
          line3="''$line3  📊 $(usage_color)''${tot_tokens} tok (''${tpm_formatted} tpm)$(rst)"
        else
          line3="📊 $(usage_color)''${tot_tokens} tok (''${tpm_formatted} tpm)$(rst)"
        fi
      else
        if [ -n "''$line3" ]; then
          line3="''$line3  📊 $(usage_color)''${tot_tokens} tok$(rst)"
        else
          line3="📊 $(usage_color)''${tot_tokens} tok$(rst)"
        fi
      fi
    fi

    # Print lines
    if [ -n "''$line2" ]; then
      printf '\n%s' "''$line2"
    fi
    if [ -n "''$line3" ]; then
      printf '\n%s' "''$line3"
    fi
    printf '\n'
  '';

  # MCP wrapper scripts for servers that need secrets
  braveSearchMcpScript = pkgs.writeShellScriptBin "brave-search-mcp" ''
    #!/usr/bin/env bash
    BRAVE_API_KEY=$(cat /run/user/1000/secrets/brave_api_key) npx -y @modelcontextprotocol/server-brave-search
  '';

  context7McpScript = pkgs.writeShellScriptBin "context7-mcp" ''
    #!/usr/bin/env bash
    API_KEY=$(cat /run/user/1000/secrets/context7_api_key)
    npx -y @upstash/context7-mcp --api-key "$API_KEY"
  '';

  # MCP server configuration
  mcpConfig = pkgs.writeText "mcp-config.json" (builtins.toJSON {
    mcpServers = lib.filterAttrs (n: v: v != null) {
      # Sequential thinking server for problem-solving
      sequential-thinking = if cfg.mcp.sequential-thinking.enable then {
        command = "npx";
        args = [ "-y" "@modelcontextprotocol/server-sequential-thinking" ];
      } else null;

      # Filesystem server with configurable paths
      filesystem = if cfg.mcp.filesystem.enable then {
        command = "npx";
        args = [ "-y" "@modelcontextprotocol/server-filesystem" ] ++ cfg.mcp.filesystem.paths;
      } else null;

      # Puppeteer for web automation
      puppeteer = if cfg.mcp.puppeteer.enable then {
        command = "npx";
        args = [ "-y" "@modelcontextprotocol/server-puppeteer" ];
      } else null;

      # Enhanced fetch server
      fetch = if cfg.mcp.fetch.enable then {
        command = "npx";
        args = [ "-y" "@kazuph/mcp-fetch" ];
      } else null;

      # Brave search (requires API key) - uses wrapper script
      brave-search = if cfg.mcp.brave-search.enable then {
        command = "${braveSearchMcpScript}/bin/brave-search-mcp";
        args = [];
      } else null;

      # Context7 for library docs (requires API key) - uses wrapper script
      context7 = if cfg.mcp.context7.enable then {
        command = "${context7McpScript}/bin/context7-mcp";
        args = [];
      } else null;
    };
  });
in
{
  options.modules.home.programs.claude-code = {
    enable = mkBoolOpt true "Enable Claude Code configuration";

    statusline = {
      enable = mkBoolOpt true "Enable custom Claude Code statusline";
      config = mkOpt lib.types.attrs {} "Custom statusline configuration";
      manageSettings = mkBoolOpt false "Manage settings.json file (WARNING: will overwrite existing settings)";
    };

    glm = {
      enable = mkBoolOpt false "Enable GLM (Z.AI) wrapper script";
      apiKey = mkStrOpt "YOUR_ZAI_API_KEY" "Z.AI API key for GLM models";
      baseUrl = mkStrOpt "https://api.z.ai/api/anthropic" "Z.AI API base URL";
      defaultModel = mkStrOpt "glm-4.6" "Default GLM model to use";
      fastModel = mkStrOpt "glm-4.5-air" "Fast GLM model for auxiliary tasks";
    };

    mcp = {
      enable = mkBoolOpt true "Enable MCP server configuration";

      sequential-thinking = {
        enable = mkBoolOpt true "Enable sequential thinking MCP server";
      };

      filesystem = {
        enable = mkBoolOpt true "Enable filesystem MCP server";
        paths = mkOpt (lib.types.listOf lib.types.str) [
          "$HOME/Documents"
          "$HOME/Desktop"
          "$HOME/Downloads"
        ] "Paths accessible to the filesystem MCP server";
      };

      puppeteer = {
        enable = mkBoolOpt true "Enable Puppeteer MCP server for web automation";
      };

      fetch = {
        enable = mkBoolOpt true "Enable enhanced fetch MCP server";
      };

      brave-search = {
        enable = mkBoolOpt false "Enable Brave Search MCP server (uses SOPS secret)";
      };

      context7 = {
        enable = mkBoolOpt false "Enable Context7 MCP server for library docs (uses SOPS secret)";
      };
    };
  };

  config = lib.mkIf cfg.enable {
    # Create the Claude Code configuration directory and files
    home.file = {
      ".claude/statusline-command.sh" = lib.mkIf cfg.statusline.enable {
        source = claudeStatuslineScript;
        executable = true;
      };

      ".claude/settings.json" = lib.mkIf (cfg.statusline.enable && cfg.statusline.manageSettings) {
        source = claudeSettingsConfig;
      };

      ".claude/mcp-config.json" = lib.mkIf cfg.mcp.enable {
        source = mcpConfig;
      };

      # Wrapper scripts for MCP servers that need secrets
      ".claude/brave-search-mcp.sh" = lib.mkIf (cfg.mcp.enable && cfg.mcp.brave-search.enable) {
        source = "${braveSearchMcpScript}/bin/brave-search-mcp";
        executable = true;
      };

      ".claude/context7-mcp.sh" = lib.mkIf (cfg.mcp.enable && cfg.mcp.context7.enable) {
        source = "${context7McpScript}/bin/context7-mcp";
        executable = true;
      };
    };

    # Install Claude Code package and additional scripts
    home.packages = [ pkgs.claude-code ] ++ (with pkgs; [
      (writeShellScriptBin "claude-setup" ''
        #!/usr/bin/env bash
        set -e

        echo "=== Claude Code Configuration Setup ==="
        echo ""

        # Check if Claude Code is running
        if pgrep -f "claude" > /dev/null 2>&1; then
          echo "⚠️  Warning: Claude Code appears to be running."
          echo "   Some changes may require restarting Claude Code."
          echo ""
        fi

        # Ensure directory exists
        mkdir -p ~/.claude

        # Statusline setup
        if [ -f ~/.claude/statusline.json ]; then
          echo "✓ Statusline configuration found at ~/.claude/statusline.json"
          echo ""
          echo "To apply the statusline, run in Claude Code:"
          echo "  /statusline ~/.claude/statusline.json"
        else
          echo "✗ No statusline configuration found"
        fi

        echo ""

        # MCP setup
        if [ -f ~/.claude/mcp-config.json ]; then
          echo "✓ MCP configuration found at ~/.claude/mcp-config.json"
          echo ""
          echo "To apply MCP servers, start Claude Code with:"
          echo "  claude --mcp-config ~/.claude/mcp-config.json"
          echo ""
          echo "Or add them individually with commands like:"
          echo "  claude mcp add-from-claude-desktop"
          echo ""
          echo "Current MCP servers configured in Nix:"
          cat ~/.claude/mcp-config.json | jq -r '.mcpServers | keys[]' 2>/dev/null || echo "  (unable to parse)"
        else
          echo "✗ No MCP configuration found"
        fi

        echo ""
        echo "To see currently active MCP servers, run:"
        echo "  claude mcp list"
      '')

      # Official Claude Code wrapper (preserves default behavior)
      # Note: claude-code package already provides 'claude' binary
      # This wrapper is commented out to avoid conflicts
      # (writeShellScriptBin "claude" ''
      #   #!/usr/bin/env bash
      #   # Official Anthropic Claude Code
      #   if [ -f ~/.claude/mcp-config.json ]; then
      #     exec ${lib.getExe pkgs.claude-code} --mcp-config ~/.claude/mcp-config.json "$@"
      #   else
      #     exec ${lib.getExe pkgs.claude-code} "$@"
      #   fi
      # '')

      # Helper to start Claude with MCP config
      (writeShellScriptBin "claude-mcp" ''
        #!/usr/bin/env bash
        if [ -f ~/.claude/mcp-config.json ]; then
          exec claude --mcp-config ~/.claude/mcp-config.json "$@"
        else
          echo "MCP config not found. Run 'claude-setup' first."
          exit 1
        fi
      '')
    ]) ++ lib.optionals cfg.glm.enable [
      # GLM (Z.AI) wrapper script
      (pkgs.writeShellScriptBin "glm" ''
        #!/usr/bin/env bash
        # GLM-powered Claude Code via Z.AI
        export ANTHROPIC_BASE_URL="${cfg.glm.baseUrl}"
        export ANTHROPIC_AUTH_TOKEN="${cfg.glm.apiKey}"
        export ANTHROPIC_DEFAULT_HAIKU_MODEL="${cfg.glm.fastModel}"
        export ANTHROPIC_DEFAULT_SONNET_MODEL="${cfg.glm.defaultModel}"
        export ANTHROPIC_DEFAULT_OPUS_MODEL="${cfg.glm.defaultModel}"

        if [ -f ~/.claude/mcp-config.json ]; then
          exec ${lib.getExe pkgs.claude-code} --mcp-config ~/.claude/mcp-config.json "$@"
        else
          exec ${lib.getExe pkgs.claude-code} "$@"
        fi
      '')
    ];

    # Add activation script
    home.activation.claudeCodeSetup = lib.mkIf (cfg.statusline.enable || cfg.mcp.enable || cfg.glm.enable) (
      lib.hm.dag.entryAfter ["writeBoundary"] ''
        if [ ! -f "$HOME/.claude/.nix_configured" ]; then
          $DRY_RUN_CMD echo "Claude Code configuration available."
          $DRY_RUN_CMD echo "Run 'claude-setup' for setup instructions."
          ${lib.optionalString cfg.glm.enable ''
          $DRY_RUN_CMD echo "GLM wrapper available as 'glm' command."
          ''}
          $DRY_RUN_CMD touch "$HOME/.claude/.nix_configured"
        fi
      ''
    );
  };
}